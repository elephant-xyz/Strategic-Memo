name: Convert LaTeX to Markdown and Split by Section

on:
  push:
    paths:
      - '**.tex'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Set up output directory
        run: mkdir -p output

      - name: Find preferred TeX files (prioritize _v2)
        id: find-tex
        run: |
          files=$(find . -name "*.tex" -print)
          filtered=()

          for path in $files; do
            filename=$(basename "$path")
            base="${filename%.tex}"
            base_no_v2="${base%_v2}"
            candidate="./${base_no_v2}_v2.tex"

            if [[ -f "$candidate" ]]; then
              filtered+=("$candidate")
            elif [[ "$filename" != *_v2.tex ]]; then
              filtered+=("$path")
            fi
          done

          printf "%s\n" "${filtered[@]}" > tex_list.txt

      - name: Verify TeX file list
        run: |
          if [[ ! -s tex_list.txt ]]; then
            echo "❌ No valid .tex files found."
            exit 1
          fi
          echo "✅ Found the following TeX files:"
          cat tex_list.txt

      - name: Convert TeX files to individual Markdown files with metadata
        run: |
          while IFS= read -r tex_file; do
            [ ! -f "$tex_file" ] && echo "Skipping invalid file: $tex_file" && continue

            echo "Processing $tex_file"
            base_name=$(basename "$tex_file" .tex)
            mkdir -p temp_md

            chapter_title=$(grep -oP '\\chapter\{.*?\}' "$tex_file" | head -1 | sed 's/\\chapter{//;s/}//')
            intro_lines=$(awk '/\\section\{/{exit} {print}' "$tex_file" | sed 's/\\chapter{.*}/# '"$chapter_title"'/')
            slug=$(echo "$chapter_title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^\-\|\-$//g')

            echo "---\ntitle: $chapter_title\nslug: $slug\ntype: chapter\norder: 0\n---" > "output/${base_name}_intro.md"
            echo "$intro_lines" | pandoc -f latex -t markdown_strict >> "output/${base_name}_intro.md"

            awk -v base="$base_name" -v parent="$slug" '
              BEGIN { RS = "\\\\section\{"; ORS = ""; filecount=1 }
              NR > 1 {
                section_raw=substr($0, index($0,"}")+1)
                title=substr($0, 1, index($0,"}")-1)
                gsub(/[[:space:]]+$/, "", title)
                slugified=tolower(title)
                gsub(/[^a-z0-9]+/, "-", slugified)
                gsub(/^-|-$/, "", slugified)
                outname="output/" base "_section_" filecount ".md"
                print "---\ntitle: " title "\nslug: " slugified "\nparent_slug: " parent "\ntype: section\norder: " filecount "\n---\n\n## " title "\n" section_raw | "pandoc -f latex -t markdown_strict -o " outname
                filecount++
              }
            ' "$tex_file"
          done < tex_list.txt

      - name: Combine all Markdown files into Full_Doc.md
        run: |
          echo "Combining all .md files into output/Full_Doc.md"
          find output -name '*.md' ! -name 'Full_Doc.md' -exec cat {} + > output/tmp_combined.md
          mv output/tmp_combined.md output/Full_Doc.md

      - name: Commit and push output to repo
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add output
          git diff --staged --quiet || git commit -m "Auto-generate markdown output from TeX"
          git push

      - name: Upload converted Markdown files
        uses: actions/upload-artifact@v4
        with:
          name: markdown-output
          path: output

      - name: Post-run diagnostic logging
        if: always()
        run: |
          echo "== Directory Contents =="
          ls -R output || echo "output directory not found"
          echo "== tex_list.txt =="
          cat tex_list.txt || echo "tex_list.txt not found"
