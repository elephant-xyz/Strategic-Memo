name: Convert LaTeX to Markdown and Split by Section

on:
  push:
    paths:
      - '**.tex'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Delete old Markdown output
        run: rm -rf output && mkdir -p output

      - name: Find preferred TeX files (prioritize _v2)
        id: find-tex
        run: |
          files=$(find . -name "*.tex" -print)
          filtered=()

          for path in $files; do
            filename=$(basename "$path")
            base="${filename%.tex}"
            base_no_v2="${base%_v2}"
            candidate="./${base_no_v2}_v2.tex"

            if [[ -f "$candidate" ]]; then
              filtered+=("$candidate")
            elif [[ "$filename" != *_v2.tex && "$filename" != Full.tex ]]; then
              filtered+=("$path")
            fi
          done

          printf "%s\n" "${filtered[@]}" > tex_list.txt

      - name: Fail if no TeX files found
        run: |
          if [[ ! -s tex_list.txt ]]; then
            echo "❌ No valid .tex files found"
            exit 1
          fi

      - name: Convert TeX to Markdown with clean metadata
        run: |
          while IFS= read -r tex_file; do
            [ ! -f "$tex_file" ] && echo "Skipping: $tex_file" && continue
            echo "Processing $tex_file"
            base_name=$(basename "$tex_file" .tex)

            chapter_title=$(grep -oP '\\chapter\{.*?\}' "$tex_file" | head -1 | sed 's/\\chapter{//;s/}//')
            chapter_title_clean=$(echo "$chapter_title" | tr -cd '[:alnum:] .:/_-' | sed 's/["\\]/ /g' | xargs)
            slug=$(echo "$chapter_title_clean" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//')

            intro_lines=$(awk '/\\section\{/{exit} {print}' "$tex_file" | sed 's/\\chapter{.*}/# '"$chapter_title_clean"'/')

            {
              echo "---"
              echo "title: \"${chapter_title_clean//\"/\\\"}\""
              echo "slug: \"$slug\""
              echo "type: \"chapter\""
              echo "order: \"0\""
              echo "---"
              echo ""
              echo "$intro_lines" | pandoc -f latex -t markdown_strict
            } > "output/${base_name}_intro.md"

            awk -v base="$base_name" -v parent="$slug" '
              BEGIN { RS = "\\\\section\\{"; ORS = ""; count = 1 }
              NR > 1 {
                title = substr($0, 1, index($0,"}")-1)
                gsub(/[[:space:]]+$/, "", title)
                gsub(/\\+|"/, "", title)
                gsub(/[^[:alnum:] .:-]/, "", title)
                slugified = tolower(title)
                gsub(/[^a-z0-9]+/, "-", slugified)
                gsub(/^-|-$/, "", slugified)

                out="output/" base "_section_" count ".md"
                print "---" > out
                print "title: \"" title "\"" >> out
                print "slug: \"" slugified "\"" >> out
                print "parent_slug: \"" parent "\"" >> out
                print "type: \"section\"" >> out
                print "order: \"" count "\"" >> out
                print "---\n" >> out

                print "\n## " title "\n" > "temp_section.tex"
                print substr($0, index($0,"}")+1) >> "temp_section.tex"

                if (system("test -s temp_section.tex") == 0) {
                  system("pandoc -f latex -t markdown_strict temp_section.tex >> " out)
                } else {
                  system("rm -f " out)
                }
                system("rm -f temp_section.tex")
                count++
              }
            ' "$tex_file"
          done < tex_list.txt

      - name: Combine all Markdown files into Full_Doc.md
        run: |
          echo "Combining .md files into output/Full_Doc.md"
          find output -name '*.md' ! -name 'Full_Doc.md' -exec cat {} + > output/tmp_combined.md
          mv output/tmp_combined.md output/Full_Doc.md

      - name: Commit and push converted Markdown
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add output/*.md
          git commit -m "Auto-converted LaTeX to Markdown" || echo "Nothing to commit"
          git push

      - name: Diagnostic Logging
        if: always()
        run: |
          echo "== Output Directory Contents =="
          ls -lh output || echo "No output directory"
          echo "== Markdown Preview (head) =="
          head -n 20 output/*.md || echo "No markdown files found"
