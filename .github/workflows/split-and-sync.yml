name: Convert LaTeX to Markdown and Split by Section

on:
  push:
    paths:
      - '**.tex'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Pandoc and yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc yamllint

      - name: Delete old Markdown output
        run: rm -rf output && mkdir -p output

      - name: Find preferred TeX files (prioritize _v2)
        id: find-tex
        run: |
          files=$(find . -name "*.tex" -print)
          filtered=()

          for path in $files; do
            filename=$(basename "$path")
            base="${filename%.tex}"
            base_no_v2="${base%_v2}"
            candidate="./${base_no_v2}_v2.tex"

            if [[ -f "$candidate" ]]; then
              filtered+=("$candidate")
            elif [[ "$filename" != *_v2.tex && "$filename" != Full.tex ]]; then
              filtered+=("$path")
            fi
          done

          printf "%s\n" "${filtered[@]}" > tex_list.txt

      - name: Verify TeX file list
        run: |
          if [[ ! -s tex_list.txt ]]; then
            echo "‚ùå No valid .tex files found. Check your repo structure or file naming."
            exit 1
          fi

          echo "‚úÖ Found the following TeX files:"
          cat tex_list.txt

      - name: Convert TeX files to individual Markdown files with metadata
        run: |
          while IFS= read -r tex_file
          do
            [ ! -f "$tex_file" ] && echo "Skipping invalid file: $tex_file" && continue

            echo "Processing $tex_file"
            base_name=$(basename "$tex_file" .tex)

            chapter_title=$(grep -oP '\\chapter\{.*?\}' "$tex_file" | head -1 | sed 's/\\chapter{//;s/}//')
            chapter_title_clean=$(echo "$chapter_title" | tr -cd '[:alnum:] .:/-' | sed 's/["\\]/ /g')
            slug=$(echo "$chapter_title_clean" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$/-/g')

            intro_lines=$(awk '/\\section\{/{exit} {print}' "$tex_file" | sed 's/\\chapter{.*}/# '"$chapter_title_clean"'/')

            {
              echo "---"
              echo "title: \"$chapter_title_clean\""
              echo "slug: \"$slug\""
              echo "type: \"chapter\""
              echo "order: \"0\""
              echo "---"
              echo ""
              echo "$intro_lines" | pandoc -f latex -t markdown_strict
            } > "output/${base_name}_intro.md"

            awk -v base="$base_name" -v parent="$slug" '
              BEGIN { RS = "\\\\section\\{"; ORS = ""; filecount = 1 }
              NR > 1 {
                raw = $0
                title = substr(raw, 1, index(raw,"}")-1)
                content = substr(raw, index(raw,"}")+1)

                gsub(/[[:space:]]+$/, "", title)
                gsub(/\\\\|\"/, "", title)
                gsub(/[^[:alnum:] .:-]/, "", title)
                slugified = tolower(title)
                gsub(/[^a-z0-9]+/, "-", slugified)
                gsub(/^-|-$/, "", slugified)

                temp_file = "temp_section.tex"
                outname = "output/" base "_section_" filecount ".md"
                print "\n## " title "\n" > temp_file
                print content >> temp_file

                if (system("test -s " temp_file) == 0) {
                  print "---" > outname
                  print "title: \"" title "\"" >> outname
                  print "slug: \"" slugified "\"" >> outname
                  print "parent_slug: \"" parent "\"" >> outname
                  print "type: \"section\"" >> outname
                  print "order: \"" filecount "\"" >> outname
                  print "---\n" >> outname

                  cmd = "pandoc -f latex -t markdown_strict " temp_file " >> " outname
                  system(cmd)
                  filecount++
                } else {
                  print "‚ö†Ô∏è Skipping empty section for: " title
                }

                system("rm -f " temp_file)
              }
            ' "$tex_file"
          done < tex_list.txt

      - name: Validate YAML Frontmatter
        run: |
          echo "üîç Validating frontmatter in output/*.md..."
          failed=false
          for file in output/*.md; do
            echo "üîé Checking $file"
            frontmatter_count=$(grep -c '^---$' "$file")
            if [[ "$frontmatter_count" -lt 2 ]]; then
              echo "‚ùå Missing frontmatter delimiters in $file"
              failed=true
              continue
            fi

            yaml_block=$(awk '/^---/{flag=!flag; next} flag' "$file")
            if [[ -z "$yaml_block" ]]; then
              echo "‚ùå No YAML frontmatter found in $file"
              failed=true
              continue
            fi

            echo "$yaml_block" > temp.yml
            if ! yamllint -d "{extends: relaxed, rules: {line-length: disable}}" temp.yml; then
              echo "‚ùå Invalid YAML syntax in $file"
              failed=true
              continue
            fi

            title=$(echo "$yaml_block" | grep '^title:' | cut -d '"' -f2)
            slug=$(echo "$yaml_block" | grep '^slug:' | cut -d '"' -f2)
            type=$(echo "$yaml_block" | grep '^type:' | cut -d '"' -f2)
            order=$(echo "$yaml_block" | grep '^order:' | cut -d '"' -f2)

            if [[ -z "$title" || -z "$slug" || -z "$type" || -z "$order" ]]; then
              echo "‚ùå Missing required field(s) in $file"
              failed=true
            fi

            if [[ "$type" == "section" ]]; then
              parent_slug=$(echo "$yaml_block" | grep '^parent_slug:' | cut -d '"' -f2)
              if [[ -z "$parent_slug" ]]; then
                echo "‚ùå Missing parent_slug for section in $file"
                failed=true
              fi
            fi
          done
          rm -f temp.yml

          if $failed; then
            echo "üö´ YAML validation failed. Aborting commit."
            exit 1
          else
            echo "‚úÖ YAML frontmatter passed all checks."
          fi

      - name: Combine all Markdown files into Full_Doc.md
        run: |
          echo "Combining all .md files into output/Full_Doc.md"
          find output -name '*.md' ! -name 'Full_Doc.md' -exec cat {} + > output/tmp_combined.md
          mv output/tmp_combined.md output/Full_Doc.md

      - name: Commit and push to repo
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add output/*.md
          git commit -m "Auto-converted LaTeX to Markdown" || echo "Nothing to commit"
          git push

      - name: Post-run diagnostic logging
        if: always()
        run: |
          echo "== Directory Contents =="
          ls -R output || echo "output directory not found"
          echo "== tex_list.txt =="
          cat tex_list.txt || echo "tex_list.txt not found"
