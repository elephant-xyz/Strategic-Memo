name: Convert LaTeX to Markdown and Split by Section

on:
  push:
    paths:
      - '**.tex'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Pandoc and yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc yamllint

      - name: Delete old Markdown output
        run: rm -rf output && mkdir -p output

      - name: Find preferred TeX files (prioritize _v2)
        id: find-tex
        run: |
          files=$(find . -name "*.tex" -print)
          filtered=()
          for path in $files; do
            filename=$(basename "$path")
            base="${filename%.tex}"
            base_no_v2="${base%_v2}"
            candidate="./${base_no_v2}_v2.tex"
            if [[ -f "$candidate" ]]; then
              filtered+=("$candidate")
            elif [[ "$filename" != *_v2.tex && "$filename" != "Full Doc.tex" ]]; then
              filtered+=("$path")
            fi
          done
          printf "%s\n" "${filtered[@]}" > tex_list.txt

      - name: Verify TeX file list
        run: |
          if [[ ! -s tex_list.txt ]]; then
            echo "❌ No valid .tex files found. Check your repo structure or file naming."
            exit 1
          fi
          echo "✅ Found the following TeX files:"
          cat tex_list.txt

      - name: Convert TeX files to Markdown
        run: |
          while IFS= read -r tex_file; do
            [ ! -f "$tex_file" ] && echo "Skipping invalid file: $tex_file" && continue
            echo "Processing $tex_file"
            base_name=$(basename "$tex_file" .tex)
            chapter_title=$(grep '\\chapter{' "$tex_file" | head -1 | sed 's/.*\\chapter{//;s/}.*//')
            chapter_title_clean=$(echo "$chapter_title" | tr -cd '[:alnum:] .:/-' | sed 's/["\\]/ /g')
            slug=$(echo "$chapter_title_clean" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$/-/g')
            intro_lines=$(awk '/\\section\{/{exit} {print}' "$tex_file" | sed 's/\\chapter{.*}/# '"$chapter_title_clean"'/')
            {
              echo "---"
              echo "title: \"$chapter_title_clean\""
              echo "slug: \"$slug\""
              echo "type: \"chapter\""
              echo "order: \"0\""
              echo "---"
              echo ""
              echo "$intro_lines" | pandoc -f latex -t markdown_strict
            } > "output/${base_name}_intro.md"
            awk -v base="$base_name" -v parent="$slug" '
              BEGIN { filecount = 1; in_section = 0; section_title = ""; section_content = "" }
              /^\\section\{/ {
                if (in_section && section_title != "") { save_section() }
                in_section = 1
                section_title = substr($0, 10)
                section_title = substr(section_title, 1, index(section_title, "}") - 1)
                section_content = ""
                next
              }
              in_section { 
                if (section_content == "") {
                  section_content = $0
                } else {
                  section_content = section_content "\n" $0
                }
              }
              END { if (in_section && section_title != "") { save_section() } }
              function save_section() {
                gsub(/[[:space:]]+$/, "", section_title)
                gsub(/\\\\/, "", section_title)
                gsub(/"/, "", section_title)
                gsub(/[^[:alnum:] .:-]/, "", section_title)
                slugified = tolower(section_title)
                gsub(/[^a-z0-9]+/, "-", slugified)
                gsub(/^-|-$/, "", slugified)
                outname = "output/" base "_section_" filecount ".md"
                temp_file = "temp_section_" filecount ".tex"
                print "## " section_title > temp_file
                print section_content >> temp_file
                if (system("test -s " temp_file) == 0) {
                  print "---" > outname
                  print "title: \"" section_title "\"" >> outname
                  print "slug: \"" slugified "\"" >> outname
                  print "parent_slug: \"" parent "\"" >> outname
                  print "type: \"section\"" >> outname
                  print "order: \"" filecount "\"" >> outname
                  print "---" >> outname
                  print "" >> outname
                  cmd = "pandoc -f latex -t markdown_strict " temp_file " >> " outname
                  system(cmd)
                  filecount++
                } else {
                  print "⚠️ Skipping empty section for: " section_title > "/dev/stderr"
                }
                system("rm -f " temp_file)
              }
            ' "$tex_file"
          done < tex_list.txt

      - name: Validate YAML Frontmatter
        run: |
          echo "🔍 Validating frontmatter in output/*.md..."
          failed=false
          for file in output/*.md; do
            echo "🔎 Checking $file"
            frontmatter_count=$(grep -c '^---$' "$file")
            if [[ "$frontmatter_count" -ne 2 ]]; then
              echo "❌ Missing or invalid frontmatter delimiters in $file"
              failed=true
              continue
            fi
            yaml_block=$(awk '/^---/{flag=!flag; next} flag' "$file")
            if [[ -z "$yaml_block" ]]; then
              echo "❌ No YAML frontmatter found in $file"
              failed=true
              continue
            fi
            echo "$yaml_block" > temp.yml
            if ! yamllint -d "{extends: relaxed, rules: {line-length: disable}}" temp.yml; then
              echo "❌ Invalid YAML syntax in $file"
              failed=true
              continue
            fi
            title=$(echo "$yaml_block" | grep '^title:' | cut -d '"' -f2)
            slug=$(echo "$yaml_block" | grep '^slug:' | cut -d '"' -f2)
            type=$(echo "$yaml_block" | grep '^type:' | cut -d '"' -f2)
            order=$(echo "$yaml_block" | grep '^order:' | cut -d '"' -f2)
            if [[ -z "$title" || -z "$slug" || -z "$type" || -z "$order" ]]; then
              echo "❌ Missing required field(s) in $file"
              failed=true
            fi
            if [[ "$type" == "section" ]]; then
              parent_slug=$(echo "$yaml_block" | grep '^parent_slug:' | cut -d '"' -f2)
              if [[ -z "$parent_slug" ]]; then
                echo "❌ Missing parent_slug for section in $file"
                failed=true
              fi
            fi
          done
          rm -f temp.yml
          if $failed; then
            echo "🚫 YAML validation failed. Aborting commit."
            exit 1
          else
            echo "✅ YAML frontmatter passed all checks."
          fi

      - name: Combine all Markdown files into Full_Doc.md
        run: |
          echo "Combining all .md files into output/Full_Doc.md"
          find output -name '*.md' ! -name 'Full_Doc.md' -exec cat {} + > output/tmp_combined.md
          mv output/tmp_combined.md output/Full_Doc.md

      - name: Commit and push to repo
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add output/*.md
          git commit -m "Auto-converted LaTeX to Markdown" || echo "Nothing to commit"
          git push

      - name: Post-run diagnostic logging
        if: always()
        run: |
          echo "== Directory Contents =="
          ls -R output || echo "output directory not found"
          echo "== tex_list.txt =="
          cat tex_list.txt || echo "tex_list.txt not found"
